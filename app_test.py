import streamlit as st
from PIL import Image
import openai
import os
import tempfile
from pdf2image import convert_from_bytes

# Load OpenAI API key
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("‚ùå OPENAI_API_KEY manquante.")
    st.stop()

client = openai.OpenAI(api_key=api_key)

# Prompt complet avec variables pour type et contexte de diffusion
def build_prompt(support_type: str, diffusion_context: str):
    return f"""
# üåü Prompt expert conformit√© r√©glementaire (pharma)

Tu es un expert r√©glementaire dans un laboratoire pharmaceutique, sp√©cialiste de la conformit√© des supports promotionnels destin√©s aux professionnels de sant√©. Tu ma√Ætrises parfaitement la r√©glementation fran√ßaise, notamment :

- Le Code de la sant√© publique (articles L.5122-1 √† L.5122-15)
- La Charte de l'information par d√©marchage ou prospection visant √† la promotion des m√©dicaments
- Le R√©f√©rentiel de certification de la visite m√©dicale
- Les recommandations de l‚ÄôANSM sur la publicit√© des m√©dicaments
- Les exigences de l‚ÄôEMA, lorsqu‚Äôelles s‚Äôappliquent

---

## üß≥ Contexte sp√©cifique fourni par l‚Äôutilisateur

- **Type de support s√©lectionn√©** : {support_type}
- **Lieu ou mode de diffusion pr√©vu** : {diffusion_context}

üí° *Adapte ton analyse r√©glementaire √† ces √©l√©ments d√®s la premi√®re section. Sois particuli√®rement rigoureux si le support est destin√© √† un usage papier seul ou √† une large audience HCP (congr√®s, mailing de masse, etc.).*

---

## üßæ √âtapes de l‚Äôanalyse

### 1. üóÇÔ∏è Identifier le type de support

> L'utilisateur a indiqu√© que le support est un(e) **{support_type}**, pr√©vu pour une diffusion via **{diffusion_context}**.

Indique parmi les options suivantes :
- banni√®re web
- diapositive PowerPoint
- affiche / kakemono
- page de magazine
- encart email
- prospectus / flyer
- plaquette produit
- autre (pr√©cis√©)

[...]

### 2. üîç Effectuer un OCR complet de l‚Äôimage

- Extraire **l‚Äôint√©gralit√© du texte visible**.
- Conserver la **mise en forme s√©mantique** : titres, encadr√©s, couleurs, tableaux, ast√©risques‚Ä¶
- Signaler toute **illisibilit√©**, **√©l√©ment masqu√©**, **texte trop petit** ou **support partiel** (ex. une seule face d‚Äôun flyer recto/verso).

### 3. ‚úÖ V√©rifier la conformit√© r√©glementaire

#### A. Mentions obligatoires
- Nom du m√©dicament
- DCI (D√©nomination Commune Internationale)
- Informations AMM (titulaire, num√©ro, date)
- Mention obligatoire : *"Ce m√©dicament est un produit de sant√©. Ne pas interrompre un traitement sans avis m√©dical"* (si applicable)
- Prix et taux de remboursement (si applicable)

#### B. √âquilibre b√©n√©fices / risques
- Pr√©sentation objective des b√©n√©fices
- Mention des effets ind√©sirables
- Absence de banalisation ou minimisation des risques

#### C. R√©f√©rences scientifiques
- Pr√©sence de sources claires
- Publications accessibles, fiables, pertinentes, dat√©es
- Fid√©lit√© des extraits aux publications originales

#### D. Caract√®re promotionnel
- Ton neutre, professionnel
- Absence de superlatifs non autoris√©s (ex : "le meilleur", "unique", "r√©volutionnaire")
- Formulations factuelles, non trompeuses

#### E. Publicit√© comparative
- Comparaison √©ventuelle avec d‚Äôautres produits
- Comparaison loyale, fond√©e, non d√©nigrante et compl√®te

#### F. Sp√©cificit√©s de la cible
- Contenu adapt√© aux **professionnels de sant√©**
- Absence de confusion possible avec une cible **grand public**

#### G. Identification du laboratoire
- Nom du laboratoire clairement indiqu√©
- Coordonn√©es, mentions l√©gales, site web, etc.

#### H. Lisibilit√© & ergonomie
- Mentions lisibles sans zoom
- Taille de police suffisante
- Hi√©rarchie visuelle claire
- Contraste suffisant entre texte et fond

---

## üìä Rapport structur√©

### A. Note globale de conformit√©

Attribue une note sur 100 avec cette √©chelle :
- ‚úÖ **90 ‚Äì 100** : Conforme
- ‚ö†Ô∏è **75 ‚Äì 89** : √Ä corriger
- ‚ùå **< 75** : Non conforme

### B. R√©sum√© des points critiques

### C. Tableau de conformit√© d√©taill√©

| Axe                       | Statut     | Justification concise                               |
|--------------------------|------------|-----------------------------------------------------|
| Mentions obligatoires    |            |                                                     |
| √âquilibre b√©n√©fices/risques |            |                                                     |
| R√©f√©rences scientifiques |            |                                                     |
| Caract√®re promotionnel   |            |                                                     |
| Publicit√© comparative    |            |                                                     |
| Sp√©cificit√© de la cible  |            |                                                     |
| Identification labo      |            |                                                     |
| Lisibilit√©/ergonomie     |            |                                                     |

### D. Propositions de reformulation

### üß† Conclusion r√©glementaire synth√©tique

**Avis final** :
‚úÖ Conforme  
‚ö†Ô∏è √Ä corriger avant diffusion  
‚ùå Non conforme ‚Äì retour au marketing recommand√©

> Recommandation : relire ce support avec le pharmacien responsable si des points critiques sont confirm√©s (ex. all√©gation sans source, donn√©es cliniques douteuses).

## üìå Bonus (optionnel)

- Signale toute incoh√©rence scientifique ou juridique critique.
- Pr√©cise s‚Äôil est recommand√© d‚Äôeffectuer une **validation interne finale** par le responsable conformit√©.
"""

# Fonction de conversion image -> PDF temporaire
def image_to_pdf_path(image: Image.Image):
    image = image.convert("RGB")
    temp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
    image.save(temp_pdf.name, format="PDF")
    return temp_pdf.name

# üîπ Streamlit app
st.title("Pour ma B√©n√© d'amour üíï : V√©rification ANSM avec GPT-4o")

uploaded_file = st.file_uploader("üìÅ Uploader une image ou un PDF", type=["pdf", "png", "jpg", "jpeg"])

support_type = st.selectbox(
    "üìÇ Quel est le type de support promotionnel ?",
    [
        "Banni√®re web",
        "Diapositive PowerPoint",
        "Affiche / Kakemono",
        "Page de magazine",
        "Encart email",
        "Prospectus / Flyer",
        "Plaquette produit",
        "Autre (pr√©ciser)"
    ]
)

diffusion_context = st.text_input(
    "üåç O√π ce support sera-t-il diffus√© ? (ex : congr√®s, site web, cabinet m√©dical...)"
)

if uploaded_file:
    if uploaded_file.type == "application/pdf":
        pdf_path = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf").name
        with open(pdf_path, "wb") as f:
            f.write(uploaded_file.read())
        pages = convert_from_bytes(open(pdf_path, "rb").read())
        for i, page in enumerate(pages):
            st.image(page, caption=f"Page {i+1}", use_container_width=True)
    else:
        image = Image.open(uploaded_file)
        st.image(image, caption="Image import√©e", use_container_width=True)
        pdf_path = image_to_pdf_path(image)

    if st.button("üîç Analyser avec GPT-4o"):
        if not diffusion_context:
            st.warning("‚ö†Ô∏è Merci d‚Äôindiquer le contexte de diffusion.")
            st.stop()

        with st.spinner("üìÑ Conversion et envoi √† OpenAI..."):
            try:
                with open(pdf_path, "rb") as f:
                    file = client.files.create(file=f, purpose="assistants")

                with st.spinner("üß† Analyse r√©glementaire en cours..."):
                    response = client.chat.completions.create(
                        model="gpt-4o",
                        messages=[
                            {
                                "role": "user",
                                "content": [
                                    {"type": "text", "text": build_prompt(support_type, diffusion_context)},
                                    {"type": "file", "file": {"file_id": file.id}}
                                ]
                            }
                        ],
                        max_tokens=1500
                    )
                st.success("‚úÖ Analyse termin√©e - J‚Äôesp√®re que √ßa va t‚Äôaider !")
                st.markdown(response.choices[0].message.content)
            except Exception as e:
                st.error(f"‚ùå Erreur OpenAI : {e}")
