import streamlit as st
from PIL import Image
import openai
import os
import tempfile
from pdf2image import convert_from_bytes
from fpdf import FPDF
import pytesseract
import re
import requests
from bs4 import BeautifulSoup
from PyPDF2 import PdfReader

# Load OpenAI API key
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    st.error("‚ùå OPENAI_API_KEY manquante.")
    st.stop()

client = openai.OpenAI(api_key=api_key)

# Fonctions utilitaires

def image_to_pdf_path(image: Image.Image):
    try:
        image = image.convert("RGB")
        temp_pdf = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf")
        image.save(temp_pdf.name, format="PDF")
        return temp_pdf.name
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la conversion image en PDF : {e}")
        return ""

def export_text_to_pdf(text: str, filename: str):
    try:
        pdf = FPDF()
        pdf.add_page()
        pdf.set_auto_page_break(auto=True, margin=15)
        pdf.set_font("Arial", size=10, encoding="utf-8")
        for line in text.split('
'):
            pdf.multi_cell(0, 10, line)
        pdf_path = os.path.join(tempfile.gettempdir(), filename)
        pdf.output(pdf_path)
        return pdf_path
    except Exception as e:
        st.error(f"‚ùå Erreur lors de l'export PDF : {e}")
        return ""

def extract_text(image: Image.Image):
    try:
        return pytesseract.image_to_string(image)
    except pytesseract.TesseractNotFoundError:
        st.error("‚ùå Tesseract OCR n'est pas install√© sur le syst√®me.")
        return ""
    except Exception as e:
        st.error(f"‚ùå Erreur OCR : {e}")
        return ""

def detect_medicament_name(text: str):
    try:
        prompt = (
            "Voici le texte extrait par OCR d'un support promotionnel :\n\n"
            f"{text}\n\n"
            "Peux-tu d√©tecter le nom du m√©dicament (nom commercial) mentionn√© dans ce support ? R√©ponds uniquement par ce nom."
        )
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=20
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"‚ùå Erreur pendant la d√©tection du m√©dicament via GPT : {e}")
        return ""

def build_prompt(support_type: str, diffusion_context: str, amm_summary: str):
    return f"""
# üéØ Prompt expert conformit√© r√©glementaire (pharma)

Tu es un expert r√©glementaire dans un laboratoire pharmaceutique, sp√©cialiste de la conformit√© des supports promotionnels destin√©s aux professionnels de sant√©. Tu ma√Ætrises parfaitement la r√©glementation fran√ßaise, notamment :

- Le Code de la sant√© publique (articles L.5122-1 √† L.5122-15)
- La Charte de l'information par d√©marchage ou prospection visant √† la promotion des m√©dicaments
- Le R√©f√©rentiel de certification de la visite m√©dicale
- Les recommandations de l‚ÄôANSM sur la publicit√© des m√©dicaments
- Les exigences de l‚ÄôEMA, lorsqu‚Äôelles s‚Äôappliquent

---

## üßæ Contexte sp√©cifique fourni par l‚Äôutilisateur

- **Type de support s√©lectionn√©** : {support_type}
- **Lieu ou mode de diffusion pr√©vu** : {diffusion_context}

---

## üìé R√©sum√© du RCP (AMM)

{amm_summary}

---

## üßæ √âtapes de l‚Äôanalyse

1. Identifier le type de support et adapter le niveau d'exigence r√©glementaire
2. V√©rifier les mentions obligatoires (nom, DCI, AMM, effets ind√©sirables...)
3. √âvaluer l'√©quilibre b√©n√©fices/risques
4. V√©rifier les r√©f√©rences scientifiques, le caract√®re promotionnel, la publicit√© comparative
5. V√©rifier la sp√©cificit√© de la cible, l'identification du laboratoire et la lisibilit√©
6. G√©n√©rer un rapport not√©, un tableau de conformit√©, et des suggestions de reformulation si n√©cessaire
"""

def summarize_amm(text: str):
    try:
        prompt = f"Voici le r√©sum√© du RCP suivant :

{text[:3000]}

Peux-tu r√©sumer les indications, contre-indications, posologie et pr√©cautions d‚Äôemploi de mani√®re claire pour un usage r√©glementaire ?"
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=700
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"‚ùå Erreur pendant le r√©sum√© du RCP : {e}")
        return ""

def find_and_summarize_amm(medicament_name: str):
    try:
        url = f"https://base-donnees-publique.medicaments.gouv.fr/index.php?search={medicament_name}"
        resp = requests.get(url)
        soup = BeautifulSoup(resp.content, "html.parser")
        link = soup.find("a", href=re.compile(r"\.pdf$"))
        if link:
            rcp_url = "https://base-donnees-publique.medicaments.gouv.fr" + link["href"]
            rcp_resp = requests.get(rcp_url)
            temp_path = os.path.join(tempfile.gettempdir(), f"{medicament_name}_rcp.pdf")
            with open(temp_path, "wb") as f:
                f.write(rcp_resp.content)
            reader = PdfReader(temp_path)
            full_text = "
".join(page.extract_text() or "" for page in reader.pages)
            return summarize_amm(full_text)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Impossible de trouver ou r√©sumer l'AMM : {e}")
    return ""

def main():
    st.title("üîç V√©rification r√©glementaire ANSM avec GPT-4o")

    support_type = st.selectbox("üìÇ Type de support promotionnel :", [
        "Banni√®re web", "Diapositive PowerPoint", "Affiche / Kakemono",
        "Page de magazine", "Encart email", "Prospectus / Flyer",
        "Plaquette produit", "Autre (pr√©ciser)"
    ])

    diffusion_context = st.text_input("üåç Contexte ou lieu de diffusion :")

    manual_override = st.checkbox("‚úçÔ∏è Entrer manuellement le nom du m√©dicament")
    manual_name = st.text_input("üíä Nom du m√©dicament (si connu)", "") if manual_override else ""

    uploaded_file = st.file_uploader("üìÅ Uploader une image ou un PDF", type=["pdf", "png", "jpg", "jpeg"])

    if uploaded_file:
        if uploaded_file.type == "application/pdf":
            pdf_path = tempfile.NamedTemporaryFile(delete=False, suffix=".pdf").name
            with open(pdf_path, "wb") as f:
                f.write(uploaded_file.read())
            pages = convert_from_bytes(open(pdf_path, "rb").read())
            image = pages[0]
        else:
            image = Image.open(uploaded_file)
            pdf_path = image_to_pdf_path(image)

        st.image(image, caption="üñºÔ∏è Aper√ßu du support")

        ocr_text = extract_text(image)
        st.subheader("üìù Texte extrait par OCR")
        st.code(ocr_text[:2000] if ocr_text else "(aucun texte extrait)", language="text")

        medicament_name = manual_name or detect_medicament_name(ocr_text)

        if medicament_name:
            medicament_name = st.text_input("‚úèÔ∏è Nom du m√©dicament d√©tect√© (modifiable) :", medicament_name)
            st.info(f"üîç M√©dicament utilis√© pour la recherche : **{medicament_name}**")

        if medicament_name:
            amm_summary = find_and_summarize_amm(medicament_name)
            st.subheader("üìé R√©sum√© automatique de l'AMM")
            st.markdown(amm_summary or "_Aucun r√©sum√© disponible._")

        if st.button("üîç Lancer l'analyse r√©glementaire compl√®te"):
            amm_summary = find_and_summarize_amm(medicament_name)
            prompt = build_prompt(support_type, diffusion_context, amm_summary)
            try:
                with open(pdf_path, "rb") as f:
                    file = client.files.create(file=f, purpose="assistants")

                response = client.chat.completions.create(
                    model="gpt-4o",
                    messages=[
                        {"role": "user", "content": [
                            {"type": "text", "text": prompt},
                            {"type": "file", "file": {"file_id": file.id}}
                        ]}
                    ],
                    max_tokens=1500
                )
                final_text = response.choices[0].message.content
                st.success("‚úÖ Analyse termin√©e")
                st.markdown(final_text)
                st.download_button("üì• T√©l√©charger le rapport en PDF", data=open(export_text_to_pdf(final_text, "rapport_ansm.pdf"), "rb").read(), file_name="rapport_ansm.pdf")
            except Exception as e:
                st.error(f"‚ùå Erreur OpenAI : {e}")

if __name__ == "__main__":
    main()
